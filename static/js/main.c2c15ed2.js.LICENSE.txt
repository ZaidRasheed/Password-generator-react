/**
 * @license React
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @license React
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @license React
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

//! -> the same logic from the testing function

//! Any password with 15+ is considered strong regardless of it's content if it passes the duplicates and not only numbers 

//! Letters are harder to guess than numbers if we have decent amount of letters then its strong

//! Making sure automatically generated passwords don't contain enough duplicates by implementing

//! all the password options

//! change strength of password and color according to its length 

//! change the copy button back to normal

//! copy content to clipboard and change the copy button appearance 

//! first check for duplicates and see how often they occur relative to the size of the string and its content

//! for letters and numbers only

//! for lower length

//! for one char type without symbols

//! generate a password according the options selected

//! if 3 the characters are duplicates and length <= 15

//! if 6 duplicates and all three char types then average

//! if duplicates >= 4 and length is <= 20 

//! if exactly 4 duplicates and not all three char types then average

//! if more than 3 the characters are duplicates and length <= 15

//! if more than 4 duplicates and not all three char types then weak

//! if more than 6 duplicates and all three char types then weak

//! if percentage of duplicates is >=40% and length is >=20

//! its length 

//! make sure the password returned is always different than the previous one

//! more than two duplicates and length <10

//! the password

//! to make sure theres at least one of each character type in the password we include one random and afterwards the remaining are random characters

//! two duplicates and length <10 

//! we also need to change the fill color length to make it move with the thumb

//! when the content of the desired password changes we have to update the requirements

//! whenever the slider value changes we have to change the value of manual input accordingly
